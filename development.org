* Development Notes
*Quick Auditory Filter will use the same structure as Constant Stimuli Hearing Experiments*

There are three phases that the software goes through. The following phases are setup, exercise, and result. Each of the
phases lead to the next, but not the opposite direction. 

** Tasks [2/2]
- [X] Copy qAF into this new structure
- [X] Keep test coverage above 80%

** Future Tasks [0/2]
*** TODO Create Home Page
This is where users can get to know more about the project.

*** TODO add about page
This is where users can see the group of peopl who are involved with the project.

** Problem [0/1]
- [ ] fix error caused by mathjs when running tests

** Links
- [[http://stackoverflow.com/questions/23267837/testing-immediately-resolved-defer-with-jasmine#23267838][StackOverflow thread that shows how to test promises in angular js.]]
[[http://www.html5rocks.com/en/tutorials/webaudio/intro/][- Introduction to Web Audio API]]

* Problem
- got undefined on line 27 of math.min.js
  - to fix this, delete math.min.js and use math.js instead from bower_components/mathjs/dist/math.js

* Setup Phase
** User Experience
This is the first page the users will see. Here they can add an array of sound to noise (SNR) values that will be 
used to generate each signal sounds during the exercise page. After adding the SNR values, they have the option to
set how many times they want to present each SNR in the exercise.

** Requirements [6/6]
+ [X] add SNR value to array
+ [X] remove SNR value from the array 
+ [X] set the number of repetition of each SNR value
+ [X] reset all
+ [X] validate input before saving 
+ [X] save to proceed to the experiment phase

** Coding Plan [4/4]
*** DONE SetupCtrl                                             :controller:
CLOSED: [2016-01-22 Fri 10:05]
Bind all services to the view.
+ addSnr(number): void
+ removeSnrByIndex(i): void
+ getSnrList(): array
+ save(): void
+ reset(): void

*** DONE listSnr                                                :directive:
CLOSED: [2016-01-22 Fri 09:19]
+ add(): void
+ removeSnr(): void
+ promptUser(): array

*** DONE snrSuplier                                               :service:
CLOSED: [2016-01-22 Fri 10:05]
*depends on snrCollection*
+ addSnr(): void
+ removeSnrByIndex(index): void
+ getSnrList(): array
+ prepSnr(number): array
+ validateUserSetup(): throw

*** DONE snrCollection                                            :service:
CLOSED: [2016-01-20 Wed 16:29]
+ addSnr(): void
+ removeSnrByIndex(index): void
+ getSnrList(): array

* Exercise Phase
** Requirements [9/9] 
+ [X] use the mouse 
+ [X] use the keyboard
+ [X] play sounds (1 signal, 2 no signal)
+ [X] choose a respose
+ [X] record user response
+ [X] go to next round and iterate until the exercise is done
+ [X] start timer
+ [X] stop timer
+ [X] proceed to the result page

** Coding Plan [12/13]
*** DONE ExerciseCtrl                                          :controller:
CLOSED: [2016-02-01 Mon 14:36]
*depends on $location, audioHandler, and userResponseRecords*
binds model to view
+ play(): void
+ setResponse(response): void
- isOver(): boolean 

*** DONE keyboardListener                                       :directive:
CLOSED: [2016-01-22 Fri 14:45]
*depends on userResponseRecords*
lets user use keyboard to submit response
+ play(): void
+ setResponse(response): void

*** DONE responseBtn                                            :directive:
CLOSED: [2016-01-22 Fri 14:45]
Allows user to use the mouse to set his or her response.
+ submit(response): void
+ isPlaying(): void
+ isCorrect(): void
+ isWrong(): void
- blink(): void 
- blinkListener(currentActiveBtn): void

*** DONE audioHandler                                             :service:
CLOSED: [2016-02-03 Wed 14:33]
*depends on audioPlayer, bufferGenerator snrSuplier, and ansersHandler*
handles the logic of which files will be played
# + activate(): void
+ playSounds(): void
+ isOver(): boolean
+ prepAnswers(): void

*** DONE audioPlayer                                              :service:
CLOSED: [2016-01-22 Fri 11:06]
*depends on $interval, webAudioContextFactory*
abstracts away how the audio is being played
+ play(audioBufferr, pauseDuration): promise

*** DONE bufferGenerator
CLOSED: [2016-02-01 Mon 14:36]
*depends on webAudioContextFactory qafAlgorithm*
- getBufferDuration(): number
- getNumberOfSignalBuffers(): number
- generateSignalBuffer(): buffer
- generateNoSignalBuffer(): buffer

*** DONE SignalProcessor 
CLOSED: [2016-02-01 Mon 14:38]
*depends on webAudioContextFactory, fftFactory*
- populateSignalBuffer(array, snr): void
- populateNoSignalBuffer(array, snr):void
- createNoise(): array
- createToneForIndex(index, snr): number

*noise is generated differently*
- loop through half of the array apply calculated amplitude from snr value
  - amplitude should have an imaginary and a real number
- mirror first half to the other end
- apply inverse fast fourier transform to the real and imaginary parts
- find root mean square value from the array ruturned by fft
- divide each elements by rms * sigma
  - inverse.map(x => x / rms * sigma)
    
*** DONE qafUtil
CLOSED: [2016-02-01 Mon 14:37]
- getRamp(value, rampDuration): number
- applyRootMeanSquare(array): void
- roundUpToNextPowerOfTwo(size): number
- applyInvereseFastFourierTransform(array): void

*** TODO qafCore
In progress.

*** DONE fastFourierTransformFactory
CLOSED: [2016-01-25 Mon 14:51]
+ getInstance(): object

*** DONE resultRecorder -> responseRecorder                       :service:
CLOSED: [2016-01-25 Mon 14:41]
*depends on answersHandler, responseTimer, and snrSuplier*
Used to create the result table

*EXAMPLE*
| Round | SNR | Expected | Actual | Correct | Timer |
|-------+-----+----------+--------+---------+-------|
|     1 |  13 |        1 |      3 | false   | 140ms |

+ setRecords(response): void
+ getRecords(): array
+ getCorrectAnswer(): boolean

*** DONE answersHandler                                           :service:
CLOSED: [2016-01-22 Fri 10:10]
creates an array of randomly generated answers
+ storeNewRandomAnswers(count): void
+ getAnswerForIndex(index): int
+ getSize(): int

*** DONE responseTimer                                            :service:
CLOSED: [2016-01-22 Fri 10:09]
Used to keep track of how long it took the user to respond
+ restart(): void
+ getTime(): string
+ pause(): void

* Result Phase
** Problem [2/2]
- [X] AngularPrint not displaying table
- [X] reset button is not resetting the audio files correctly
  - temporary sulotion is to reroute the user to the setup page and reload the page.

** Requirements [4/4]
- [X] see the result of the experiment in a graph
- [X] print the result
- [X] export the graph into an easy to read file format
- [X] reset all and go back to setup page
* Make qAF Adaptive
Add the ability to determine what the masker level for the next round. This requires using the kalman filter 
algorithm. Given the user's current response (correct or incorrect) we will generate a matrix of all the possible
values for the next maskerLvl with their uncertainties. The maskerLvl that corresponds the lowest uncertainty will be
the one we present to to the next round.

** Requirements [/] 
- [ ] change setup view 
- [ ] change signal level to be fixed throughout the experiment
- [ ] change signal frequency to be fixed throughout the experiment
- [ ] predict the next masker level for the next round
- [ ] predict the next lower and upper notch for the next round

** Formulas
gl = (fs - fl) / fs

BW = 2.25 * fs

amp = 0.05 * 10 ^ (("Level" - 80) / 20)

s = amp * sqrt(2) * sin(2pift)

m = amp * sqrt(BW) * N

*where*

m = masker level
s = signal level (user defined and fixed throughout the experiment)
BW = bandwidth
gl = distance from lower notch to signal frequency
gu = distance from signal frequency to upper notch
amp = amplitude
N = number of trials

 --m--                --m--
|     |       ^      |     |
|     |       |      |     |
|     |       s      |     |
|     |       |      |     |
|     |       |      |     |
--BW-----gl------gu-----BW--

** Setup Phase
I need to update the setup page to prompt user for a signal level and signal frequency that will be used throughout 
the experiment. Since the signal level is fixed, we no longer need a list of SNR from the user. Therefore, the SNR
list needs to be removed.

*** Question [0/0]
**** TODO InputBox on setup page
- I'm not sure what the step and max values should be for the signal level and frequency setup page.
- Ask Dr. Shen what the default values for the signal level, and signal frequency.

*** Coding Plan [1/1]
**** DONE userConfig                                             :service:
CLOSED: [2016-02-18 Thu 16:02]
Responsible for storing user configuration for the experiment such as the signal level, and frequency. Also 
responsible for sharing configuration between different services and controller.

- getSignalLevel(): number
- setSignalLevel(): number
- getSignalFrequency(): number
- setSignalFrequency(): number
- validateConfig(): boolean

**** TODO SetupCtrl


