* Development Notes
*Quick Auditory Filter will use the same structure as Constant Stimuli Hearing Experiments*

There are three phases that the software goes through. The following phases are setup, exercise, and result. Each of the
phases lead to the next, but not the opposite direction. 

** Tasks [0/1]
- [ ] Copy qAF into this new structure
- [ ] Keep test coverage above 80%

** Future Tasks [0/2]
*** TODO Create Home Page
This is where users can get to know more about the project.

*** TODO add about page
This is where users can see the group of peopl who are involved with the project.

** Problem [/]

** Links
- [[http://stackoverflow.com/questions/23267837/testing-immediately-resolved-defer-with-jasmine#23267838][StackOverflow thread that shows how to test promises in angular js.]]
[[http://www.html5rocks.com/en/tutorials/webaudio/intro/][- Introduction to Web Audio API]]

* Setup Phase
** User Experience
This is the first page the users will see. Here they can add an array of sound to noise (SNR) values that will be 
used to generate each signal sounds during the exercise page. After adding the SNR values, they have the option to
set how many times they want to present each SNR in the exercise.

** Requirements [6/6]
+ [X] add SNR value to array
+ [X] remove SNR value from the array 
+ [X] set the number of repetition of each SNR value
+ [X] reset all
+ [X] validate input before saving 
+ [X] save to proceed to the experiment phase

** Coding Plan [4/4]
*** DONE SetupCtrl                                             :controller:
CLOSED: [2016-01-22 Fri 10:05]
Bind all services to the view.
+ addSnr(number): void
+ removeSnrByIndex(i): void
+ getSnrList(): array
+ save(): void
+ reset(): void


*** DONE listSnr                                                :directive:
CLOSED: [2016-01-22 Fri 09:19]
+ add(): void
+ removeSnr(): void
+ promptUser(): array

*** DONE snrSuplier                                               :service:
CLOSED: [2016-01-22 Fri 10:05]
*depends on snrCollection*
+ addSnr(): void
+ removeSnrByIndex(index): void
+ getSnrList(): array
+ prepSnr(number): array
+ validateUserSetup(): throw

*** DONE snrCollection                                            :service:
CLOSED: [2016-01-20 Wed 16:29]
+ addSnr(): void
+ removeSnrByIndex(index): void
+ getSnrList(): array

* Exercise Phase
** Requirements [0/9] 
+ [ ] use the mouse 
+ [ ] use the keyboard
+ [ ] play sounds (1 signal, 2 no signal)
+ [ ] choose a respose
+ [ ] record user response
+ [ ] go to next round and iterate until the exercise is done
+ [ ] start timer
+ [ ] stop timer
+ [ ] proceed to the result page

** Coding Plan [5/8]
*** TODO ExerciseCtrl                                          :controller:
*depends on $location, audioHandler, and userResponseRecords*
binds model to view
+ play(): void
+ setResponse(response): void
- isOver(): boolean 

*** DONE keyboardListener                                       :directive:
CLOSED: [2016-01-22 Fri 14:45]
*depends on userResponseRecords*
lets user use keyboard to submit response
+ play(): void
+ setResponse(response): void

*** DONE responseBtn                                            :directive:
CLOSED: [2016-01-22 Fri 14:45]
Allows user to use the mouse to set his or her response.
+ submit(response): void
+ isPlaying(): void
+ isCorrect(): void
+ isWrong(): void
- blink(): void 
- blinkListener(currentActiveBtn): void

*** TODO audioHandler                                             :service:
*depends on audioPlayer, snrSuplier, and ansersHandler*
handles the logic of which files will be played
+ play(): void
+ isOver(): boolean
+ prepAnsers: void
- getSinalBuffer(): buffer
- getRandomNoSignalBuffer(): buffer

*** DONE audioPlayer                                              :service:
CLOSED: [2016-01-22 Fri 11:06]
*depends on $interval, webAudioContextFactory*
abstracts away how the audio is being played
+ play(audioData, pauseDuration): promise

*** TODO resultRecorder -> responseRecorder                       :service:
*depends on answersHandler, responseTimer, and snrSuplier*
Used to create the result table

*EXAMPLE*
| Round | SNR | Expected | Actual | Correct | Timer |
|-------+-----+----------+--------+---------+-------|
|     1 |  13 |        1 |      3 | false   | 140ms |

+ setRecords(response): void
+ getRecords(): array
+ getCorrectAnswer(): boolean

*** DONE answersHandler                                           :service:
CLOSED: [2016-01-22 Fri 10:10]
creates an array of randomly generated answers
+ storeNewRandomAnswers(count): void
+ getAnswerForIndex(index): int
+ getSize(): int

*** DONE responseTimer                                            :service:
CLOSED: [2016-01-22 Fri 10:09]
Used to keep track of how long it took the user to respond
+ restart(): void
+ getTime(): string
+ pause(): void

* Result Phase
** Problem [0/2]
- [ ] AngularPrint not displaying table
- [ ] reset button is not resetting the audio files correctly
  - temporary sulotion is to reroute the user to the setup page and reload the page.

** Requirements [0/4]
- [ ] see the result of the experiment in a graph
- [ ] print the result
- [ ] export the graph into an easy to read file format
- [ ] reset all and go back to setup page
